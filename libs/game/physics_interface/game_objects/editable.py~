from _env import *

def distance( a, b ):
    return sum ( [ (x1-x2)**2 for x1,x2 in zip( a, b ) ] ) ** .5

MAX_DIST = 40

class Editable( GameObject ):
    end_points = ()
    width    = 3

    curve    = False
    color    = (1,1,1,1)
    colltype = COLLTYPE_DEFAULT

    ##### Setters
    def set_start( self, origin, dim, pos ):   
        self.start = pos
        self.store_relative( origin, dim )
    def set_end( self, origin, dim, pos ):        
        self.end = pos
        self.store_relative( origin, dim )
    def set_thirdpt( self, origin, dim, pos ):   
        self.thirdpt  = pos
        self.store_relative( origin, dim )

    ##### Helpers
    def near_start( self, pos ):  return distance( pos, self.start ) <= MAX_DIST
    def near_end( self, pos ):    return distance( pos, self.end ) <= MAX_DIST


    def store_relative( self, origin, dim ):
        pass

    def __init__( self, physics_interface, (x1,y1), (x2,y2) ):
        GameObject.__init__( self )
        self.start, self.end = (x1,y1), (x2,y2) 
 
        if self.curve:
            self.thirdpt = ( (x1-x2)/2., (y1-y2)/2. ) # the thirdpt starts as the line midpoint.
        else:
            self.thirdpt = None

        ox, oy      = physics_interface.pos
        xdim, ydim  = physics_interface.size
        self.store_relative( (ox,oy), (xdim, ydim) )

        # Represent the object on the level-builder screen.
        self.load_into_physics_interface( physics_interface )

    def build_phys_obj( self, space ):
        for i in range( len(self.points) - 1 ):
            start, end = self.points[i], self.points[i+1]
            seg = cy.Segment(space.static_body, Vec2d( *start ), Vec2d( *end ), self.width)
            #seg.friction = 0.99
            seg.elasticity = 0.7
            seg.collision_type   = self.colltype
            self.shapes   += [ seg ]

    def build_render_obj( self ):
        color = Color( *self.color )
        line  = Line( points=reduce( lambda x,y: x+y, self.points ), width=self.width )
        self.render_obj = color, line

    def setup_for_editing( self, physics_interface ):
        self.remove()
        self.physics_interface = physics_interface
        self.build_render_obj()
        for instr in self.render_obj:
            self.physics_interface.canvas.add( instr )
            
        # Add endpoint circles to the render_obj.
        self.draw_endpoints()

    def tear_down_from_editing( self ):
        # Destroy the renderable object. (Now it's ready for loading.)
        self.remove_render_obj()
        # Destroy the endpoint circles.
        self.remove_endpoints()
        self.physics_interface = None

    def draw_endpoints( self ):
        start  = self.start
        end    = self.end
        radius = 20
        with self.physics_interface.canvas:
            color   = Color( 1,1,1,1 )
            circle1 = Line( circle=(start[0], start[1], radius) )
            circle2 = Line( circle=(end[0], end[1], radius) )
        self.end_points = color, circle1, circle2

    def update_render_obj( self ):
        self.remove_render_obj()
        self.build_render_obj()
        for instr in self.render_obj:
            self.physics_interface.canvas.add( instr )

    def update_endpoints( self ):
        self.remove_endpoints()
        start  = self.start
        end    = self.end
        radius = 20
        with self.physics_interface.canvas:
            color   = Color( 1,1,1,1 )
            circle1 = Line( circle=(start[0], start[1], radius) )
            circle2 = Line( circle=(end[0], end[1], radius) )
        self.end_points = color, circle1, circle2

    def remove_render_obj( self ):
        for instr in self.render_obj:
            self.physics_interface.canvas.remove( instr )

    def remove_endpoints( self ):
        for instr in self.end_points:
            self.physics_interface.canvas.remove( instr )
        self.end_points = ()

    def remove( self ):
        self.remove_endpoints()
        GameObject.remove( self )

